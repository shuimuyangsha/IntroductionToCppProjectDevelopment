
/* 游戏初始化
   生成 游戏对象，初始化地图，对象位置等
*/
bool CGame::GameInit()
{
    srand(GetTickCount());								// 初始化随机数生成器
    return (this->*m_initFunc[m_eStep])();					// 根据不同阶段调用不同的处理方法
}
 
// 游戏初始化 : 选择阶段
bool CGame::GameInitMenu()
{
    return true;
}
 
// 游戏初始化 : 单人对电脑 菜单阶段
bool CGame::GameInitOne2BotMenu()
{
    
    RECT rc;
    GetWindowRect(m_hWnd, &rc);
    PointF pt;
    pt.X = rc.left + (rc.right - rc.left) / 2.0f;
    pt.Y = rc.top + (rc.bottom - rc.top) / 2.0f;
    m_keymenu01.SetCenterPoint(pt);				// 设置单人对战keyMenu位置为屏幕正中间
    m_keymenu01.SetStop(false);					// 设置“不”停止播放动画
    return true;
}
 
// 游戏初始化 : 单人对电脑
bool CGame::GameInitOne2Bot()
{
    for (; ;) {													// 死循环的一种写法
        m_map.LoadMap();											// 载入地图
        // 玩家一
        {
            m_player01 = CPlayer(0, 0, _T("tank_player1.png"));		// 制造玩家一对象
            PointF ptCenter;
            if (!m_map.FindRandomPosition(ptCenter)) {				// 随机查找地图中的空地
                AfxMessageBox(_T("调整Player01位置失败"));    		// 提示调整位置失败
            }
            else {
                m_player01.SetCenterPoint(ptCenter);				// 放置玩家一到空地正中
            }
        }
 
        // 机器人
        {
            m_bot = CBot(0, 0, _T("tank_bot.png"));				// 制造机器人对象
            PointF ptCenter;
            if (!m_map.FindRandomPosition(ptCenter)) {				// 随机查找地图中的空地
                AfxMessageBox(_T("调整Bot位置失败")); 				// 提示调整位置失败
            }
            else {
                m_bot.SetCenterPoint(ptCenter);					// 放置机器人到空地正中
            }
        }
        m_lstBullets.clear();										// 清空子弹数组

        // 判断是否合法
        {
            // 获取机器人，玩家 所在的位置
            int startX, startY, targetX, targetY; 
            if (!m_map.FindObjPosition(m_bot, startX, startY) || 
				!m_map.FindObjPosition(m_player01, targetX, targetY)) {
                AfxMessageBox(_T("获取坦克位置发生错误"));
                goto __Init_End;
            }
             // 判断玩家和机器人是否连通，如果无法连通，则无法进个游戏，所以需要重新设置
            VPath path;
            m_map.FindPath(startX, startY, targetX, targetY, path);
            if (!path.empty()) {
                goto __Init_End; // 可以连通，跳出循环，直接跳到函数尾部，初始化结束
            }
        }
    }
__Init_End:
    return true;
}
 
// 游戏初始化 : 单人对电脑 结束
bool CGame::GameInitOne2BotEnd()
{
     return true;
}
 
// 游戏初始化 : 双人对战 菜单阶段
bool CGame::GameInitOne2OneMenu()
{
    // 设置 两个玩家的 keyMenu 位置 : 屏幕正中间
    RECT rc;
    GetWindowRect(m_hWnd, &rc);
    PointF pt;
    pt.X = rc.left + m_keymenu01.GetRect().Width / 2.0f + 100;
    pt.Y = rc.top + (rc.bottom - rc.top) / 2.0f;
    m_keymenu01.SetCenterPoint(pt);							// 设置该菜单项的位置
    m_keymenu01.SetStop(false);								// 设置不停止播放动画
 
 
    pt.X = rc.right - m_keymenu02.GetRect().Width / 2.0f - 100;
    pt.Y = rc.top + (rc.bottom - rc.top) / 2.0f;
    m_keymenu02.SetCenterPoint(pt); 							// 设置该菜单项的位置
    m_keymenu02.SetStop(false); 								// 设置不停止播放动画
 
    return true;
}
 
// 游戏初始化 : 双人对战
bool CGame::GameInitOne2One()
{
    for (;;) {
        m_map.LoadMap();										// 载入地图
        //中间放置坦克
        {
            m_player01 = CPlayer(0, 0, _T("tank_player1.png"));	// 构造玩家一对象
            PointF ptCenter;
            if (!m_map.FindRandomPosition(ptCenter)) {			// 查找随机的空地位置
                AfxMessageBox(_T("调整Player01位置失败"));		// 提示查找失败
            }
            else {
                m_player01.SetCenterPoint(ptCenter); // 设置玩家一位置到这块空地中心	
            }
        }
        {
            m_player02 = CPlayer(0, 0, _T("tank_player2.png"));	// 构造玩家二
            PointF ptCenter;
            if (!m_map.FindRandomPosition(ptCenter)) {			// 随机查找地图中的空地
                AfxMessageBox(_T("调整Player02位置失败"));		// 提示查找失败
            }
            else {
                m_player02.SetCenterPoint(ptCenter);	// 设置玩家二的位置到这块空地中心
            }
        }
 
        m_lstBullets.clear();							// 清空子弹数组
        // 判断是否合法
        {
            // 查找机器人，玩家 所在的位置
            int startX, startY, targetX, targetY;
            if (!m_map.FindObjPosition(m_player02, startX, startY) || 
                !m_map.FindObjPosition(m_player01, targetX, targetY)) {
                AfxMessageBox(_T("获取坦克位置发生错误")); 	// 提示查找失败
                break;
            }
             // 判断两个玩家是否可以连通
            VPath path;
            m_map.FindPath(startX, startY, targetX, targetY, path);
            if (!path.empty()) {
                break;									// 可以连通跳出循环,初始化完成
            }
             // 不可以连通，说明本次初始化失败，不跳出循环，继续尝试一下初始化
        }
    }
    return true;
}
 
// 游戏初始化 : 双人对战 结束
bool CGame::GameInitOne2OneEnd()
{
    return true;	// 不需要初始化动作，直接返回true表示初始化成功
}
 
////////////////////////////////////////////////////////////////////////////////
